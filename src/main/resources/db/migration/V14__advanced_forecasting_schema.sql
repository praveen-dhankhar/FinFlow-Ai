-- H2 and PostgreSQL compatible DDL for advanced forecasting tables and indexes

-- forecast_performance
create table if not exists forecast_performance (
    id bigint generated by default as identity primary key,
    config_id bigint not null,
    user_id bigint not null,
    mape double precision not null,
    horizon_days int not null,
    lookback_days int not null,
    created_at timestamp with time zone
);

-- forecast_anomalies
create table if not exists forecast_anomalies (
    id bigint generated by default as identity primary key,
    user_id bigint not null,
    config_id bigint,
    event_date date not null,
    anomaly_value double precision not null,
    zscore double precision,
    params_json text,
    created_at timestamp with time zone
);

-- forecast_jobs
create table if not exists forecast_jobs (
    id bigint generated by default as identity primary key,
    user_id bigint not null,
    description varchar(500),
    status varchar(32) not null,
    error_message varchar(1000),
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);

-- Indexes (generic; safe for H2)
create index if not exists idx_forecast_perf_user on forecast_performance (user_id);
create index if not exists idx_forecast_perf_config on forecast_performance (config_id);
create index if not exists idx_forecast_anom_user_date on forecast_anomalies (user_id, event_date);
create index if not exists idx_forecast_jobs_status on forecast_jobs (status);

-- Materialized view placeholders (commented for H2); enable on PostgreSQL
-- PostgreSQL example:
-- create materialized view if not exists mv_forecast_daily as
-- select user_id, target_date, avg(forecast_value) as avg_value
-- from forecast_results
-- group by user_id, target_date;


