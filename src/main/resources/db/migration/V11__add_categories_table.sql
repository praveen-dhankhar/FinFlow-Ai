-- Add categories table with hierarchical support
-- Compatible with both H2 and PostgreSQL databases

CREATE TABLE IF NOT EXISTS categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description VARCHAR(500),
    color VARCHAR(50),
    icon VARCHAR(50),
    parent_id BIGINT,
    user_id BIGINT NOT NULL,
    sort_order INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    is_system BOOLEAN NOT NULL DEFAULT FALSE,
    usage_count INTEGER NOT NULL DEFAULT 0,
    last_used_at TIMESTAMP WITH TIME ZONE,
    metadata TEXT, -- JSON metadata column
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_categories_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    CONSTRAINT fk_categories_parent FOREIGN KEY (parent_id) REFERENCES categories(id) ON DELETE CASCADE
);

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_categories_name ON categories(name);
CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories(parent_id);
CREATE INDEX IF NOT EXISTS idx_categories_user_id ON categories(user_id);
CREATE INDEX IF NOT EXISTS idx_categories_is_active ON categories(is_active);
CREATE INDEX IF NOT EXISTS idx_categories_created_at ON categories(created_at);
CREATE INDEX IF NOT EXISTS idx_categories_sort_order ON categories(sort_order);
CREATE INDEX IF NOT EXISTS idx_categories_usage_count ON categories(usage_count);
CREATE INDEX IF NOT EXISTS idx_categories_last_used_at ON categories(last_used_at);
CREATE INDEX IF NOT EXISTS idx_categories_is_system ON categories(is_system);
CREATE INDEX IF NOT EXISTS idx_categories_color ON categories(color);
CREATE INDEX IF NOT EXISTS idx_categories_icon ON categories(icon);

-- Composite indexes for common query patterns
CREATE INDEX IF NOT EXISTS idx_categories_user_active ON categories(user_id, is_active);
CREATE INDEX IF NOT EXISTS idx_categories_user_parent ON categories(user_id, parent_id);
CREATE INDEX IF NOT EXISTS idx_categories_user_sort ON categories(user_id, sort_order);
CREATE INDEX IF NOT EXISTS idx_categories_parent_active ON categories(parent_id, is_active);

-- Unique constraint for category name per user
CREATE UNIQUE INDEX IF NOT EXISTS uk_categories_user_name ON categories(user_id, name) WHERE is_active = true;

-- Add constraints for data validation
ALTER TABLE categories ADD CONSTRAINT chk_categories_name_length 
    CHECK (LENGTH(name) >= 1 AND LENGTH(name) <= 100);

ALTER TABLE categories ADD CONSTRAINT chk_categories_description_length 
    CHECK (description IS NULL OR LENGTH(description) <= 500);

ALTER TABLE categories ADD CONSTRAINT chk_categories_color_length 
    CHECK (color IS NULL OR LENGTH(color) <= 50);

ALTER TABLE categories ADD CONSTRAINT chk_categories_icon_length 
    CHECK (icon IS NULL OR LENGTH(icon) <= 50);

ALTER TABLE categories ADD CONSTRAINT chk_categories_sort_order 
    CHECK (sort_order >= 0);

ALTER TABLE categories ADD CONSTRAINT chk_categories_usage_count 
    CHECK (usage_count >= 0);

-- Prevent self-reference in parent_id
ALTER TABLE categories ADD CONSTRAINT chk_categories_no_self_parent 
    CHECK (parent_id IS NULL OR parent_id != id);

-- PostgreSQL-specific optimizations (commented for H2 compatibility)
-- Uncomment when migrating to PostgreSQL

-- GIN index for JSON metadata column (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_categories_metadata_gin ON categories USING GIN(metadata);

-- Full-text search index (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_categories_fulltext ON categories USING GIN(
--     to_tsvector('english', name || ' ' || COALESCE(description, ''))
-- );

-- Partial indexes for better performance (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_categories_active_system ON categories(is_active, is_system) 
--     WHERE is_active = true AND is_system = false;

-- CREATE INDEX IF NOT EXISTS idx_categories_frequently_used ON categories(usage_count) 
--     WHERE usage_count >= 10;

-- CREATE INDEX IF NOT EXISTS idx_categories_recently_used ON categories(last_used_at) 
--     WHERE last_used_at >= CURRENT_DATE - INTERVAL '30 days';

-- Hierarchical query optimization (PostgreSQL only)
-- This would be used for recursive queries to get category trees
-- CREATE INDEX IF NOT EXISTS idx_categories_hierarchy ON categories(user_id, parent_id, sort_order);

-- Add comments for documentation
COMMENT ON TABLE categories IS 'Hierarchical categories for organizing financial data';
COMMENT ON COLUMN categories.parent_id IS 'Parent category ID for hierarchical structure';
COMMENT ON COLUMN categories.metadata IS 'JSON metadata column for flexible category information';
COMMENT ON COLUMN categories.is_system IS 'Whether this is a system-defined category';
COMMENT ON COLUMN categories.usage_count IS 'Number of times this category has been used';
COMMENT ON COLUMN categories.last_used_at IS 'Timestamp of last usage';
COMMENT ON COLUMN categories.sort_order IS 'Order for displaying categories';

-- Insert some default system categories
INSERT INTO categories (name, description, color, icon, user_id, is_system, is_active, sort_order) 
SELECT 
    'Food & Dining',
    'Restaurants, groceries, and food-related expenses',
    '#FF6B6B',
    'food',
    u.id,
    true,
    true,
    1
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM categories c 
    WHERE c.name = 'Food & Dining' AND c.user_id = u.id
);

INSERT INTO categories (name, description, color, icon, user_id, is_system, is_active, sort_order) 
SELECT 
    'Transportation',
    'Gas, public transport, car maintenance',
    '#4ECDC4',
    'car',
    u.id,
    true,
    true,
    2
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM categories c 
    WHERE c.name = 'Transportation' AND c.user_id = u.id
);

INSERT INTO categories (name, description, color, icon, user_id, is_system, is_active, sort_order) 
SELECT 
    'Entertainment',
    'Movies, games, hobbies, and entertainment',
    '#45B7D1',
    'entertainment',
    u.id,
    true,
    true,
    3
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM categories c 
    WHERE c.name = 'Entertainment' AND c.user_id = u.id
);

INSERT INTO categories (name, description, color, icon, user_id, is_system, is_active, sort_order) 
SELECT 
    'Salary',
    'Regular salary and employment income',
    '#96CEB4',
    'salary',
    u.id,
    true,
    true,
    4
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM categories c 
    WHERE c.name = 'Salary' AND c.user_id = u.id
);

INSERT INTO categories (name, description, color, icon, user_id, is_system, is_active, sort_order) 
SELECT 
    'Savings',
    'Money saved for future use',
    '#FFEAA7',
    'savings',
    u.id,
    true,
    true,
    5
FROM users u
WHERE NOT EXISTS (
    SELECT 1 FROM categories c 
    WHERE c.name = 'Savings' AND c.user_id = u.id
);
