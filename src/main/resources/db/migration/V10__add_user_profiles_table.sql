-- Add user_profiles table for extended user information
-- Compatible with both H2 and PostgreSQL databases

CREATE TABLE IF NOT EXISTS user_profiles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(255),
    phone_number VARCHAR(20),
    date_of_birth DATE,
    location VARCHAR(100),
    bio VARCHAR(500),
    profile_picture_url VARCHAR(255),
    timezone VARCHAR(50),
    language VARCHAR(10),
    is_public BOOLEAN NOT NULL DEFAULT FALSE,
    email_notifications BOOLEAN NOT NULL DEFAULT TRUE,
    sms_notifications BOOLEAN NOT NULL DEFAULT FALSE,
    marketing_emails BOOLEAN NOT NULL DEFAULT FALSE,
    settings TEXT, -- JSON settings column
    last_login_at TIMESTAMP WITH TIME ZONE,
    login_count INTEGER NOT NULL DEFAULT 0,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL,
    
    CONSTRAINT fk_user_profiles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Create indexes for performance optimization
CREATE INDEX IF NOT EXISTS idx_user_profiles_user_id ON user_profiles(user_id);
CREATE INDEX IF NOT EXISTS idx_user_profiles_email ON user_profiles(email);
CREATE INDEX IF NOT EXISTS idx_user_profiles_created_at ON user_profiles(created_at);
CREATE INDEX IF NOT EXISTS idx_user_profiles_is_active ON user_profiles(is_active);
CREATE INDEX IF NOT EXISTS idx_user_profiles_is_public ON user_profiles(is_public);
CREATE INDEX IF NOT EXISTS idx_user_profiles_last_login_at ON user_profiles(last_login_at);
CREATE INDEX IF NOT EXISTS idx_user_profiles_location ON user_profiles(location);
CREATE INDEX IF NOT EXISTS idx_user_profiles_language ON user_profiles(language);
CREATE INDEX IF NOT EXISTS idx_user_profiles_timezone ON user_profiles(timezone);

-- Create unique constraint for email per user (if email is provided)
-- Note: This allows multiple users to have the same email, but each user can only have one profile
-- H2 and PostgreSQL both allow multiple NULLs in unique indexes; no WHERE needed
CREATE UNIQUE INDEX IF NOT EXISTS uk_user_profiles_user_email ON user_profiles(user_id, email);

-- Add constraints for data validation
ALTER TABLE user_profiles ADD CONSTRAINT chk_user_profiles_email_format 
    CHECK (email IS NULL OR email ~ '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$');

ALTER TABLE user_profiles ADD CONSTRAINT chk_user_profiles_phone_format 
    CHECK (phone_number IS NULL OR phone_number ~ '^[+]?[0-9\s\-\(\)]{7,20}$');

ALTER TABLE user_profiles ADD CONSTRAINT chk_user_profiles_date_of_birth 
    CHECK (date_of_birth IS NULL OR date_of_birth <= CURRENT_DATE);

ALTER TABLE user_profiles ADD CONSTRAINT chk_user_profiles_login_count 
    CHECK (login_count >= 0);

-- PostgreSQL-specific optimizations (commented for H2 compatibility)
-- Uncomment when migrating to PostgreSQL

-- GIN index for JSON settings column (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_user_profiles_settings_gin ON user_profiles USING GIN(settings);

-- Full-text search index (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_user_profiles_fulltext ON user_profiles USING GIN(
--     to_tsvector('english', first_name || ' ' || last_name || ' ' || COALESCE(bio, ''))
-- );

-- Partial indexes for better performance (PostgreSQL only)
-- CREATE INDEX IF NOT EXISTS idx_user_profiles_active_public ON user_profiles(is_active, is_public) 
--     WHERE is_active = true AND is_public = true;

-- CREATE INDEX IF NOT EXISTS idx_user_profiles_notifications ON user_profiles(email_notifications, sms_notifications) 
--     WHERE email_notifications = true OR sms_notifications = true;

-- Add comments for documentation
COMMENT ON TABLE user_profiles IS 'Extended user profile information with privacy and notification settings';
COMMENT ON COLUMN user_profiles.settings IS 'JSON settings column for flexible user preferences';
COMMENT ON COLUMN user_profiles.profile_picture_url IS 'URL or path to user profile picture';
COMMENT ON COLUMN user_profiles.is_public IS 'Whether profile is visible to other users';
COMMENT ON COLUMN user_profiles.login_count IS 'Number of times user has logged in';
COMMENT ON COLUMN user_profiles.last_login_at IS 'Timestamp of last login';
