name: Preview Deployment

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read

env:
  NODE_VERSION: '16.20.2'

jobs:
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Diagnostic: environment and secrets check
        run: |
          echo "Node version:" && node --version || true
          echo "NPM version:" && npm --version || true
          # Fail early with clear message if key Vercel secrets are missing
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "ERROR: VERCEL_TOKEN must be set in repository secrets"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_ORG_ID }}" ]; then echo "ERROR: VERCEL_ORG_ID must be set in repository secrets"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_PROJECT_ID }}" ]; then echo "ERROR: VERCEL_PROJECT_ID must be set in repository secrets"; exit 1; fi

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Upload npm debug logs (if npm ci fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-preview
          path: /home/runner/.npm/_logs/**/*.log

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--scope=${{ secrets.VERCEL_ORG_ID }}'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            // Find prior bot comment case-insensitively
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body && comment.body.toLowerCase().includes('preview deployment')
            );
            
            const previewUrl = `https://finance-forecast-git-${context.payload.pull_request.head.ref.replace(/\//g, '-')}-${context.repo.owner}.vercel.app`;
            
            const body = `## ðŸš€ Preview Deployment
            
            **Preview URL:** ${previewUrl}
            
            **Branch:** \`${context.payload.pull_request.head.ref}\`
            **Commit:** \`${context.payload.pull_request.head.sha.substring(0, 7)}\`
            
            ### ðŸ“Š Build Status
            - âœ… Linting passed
            - âœ… Type checking passed  
            - âœ… Tests passed
            - âœ… Build successful
            
            ### ðŸ”— Links
            - [View Preview](${previewUrl})
            - [View Changes](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${context.payload.pull_request.base.sha}...${context.payload.pull_request.head.sha})
            
            ---
            *This preview will be automatically updated when you push new commits to this branch.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
