name: Preview Deployment

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  # Build and deploy preview
  preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linting
        working-directory: ./frontend
        run: npm run lint

      - name: Run type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Run tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--scope=${{ secrets.VERCEL_ORG_ID }}'

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
            );
            
            const previewUrl = `https://finance-forecast-git-${context.payload.pull_request.head.ref.replace(/\//g, '-')}-${context.repo.owner}.vercel.app`;
            
            const body = `## ðŸš€ Preview Deployment
            
            **Preview URL:** ${previewUrl}
            
            **Branch:** \`${context.payload.pull_request.head.ref}\`
            **Commit:** \`${context.payload.pull_request.head.sha.substring(0, 7)}\`
            
            ### ðŸ“Š Build Status
            - âœ… Linting passed
            - âœ… Type checking passed  
            - âœ… Tests passed
            - âœ… Build successful
            
            ### ðŸ”— Links
            - [View Preview](${previewUrl})
            - [View Changes](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${context.payload.pull_request.base.sha}...${context.payload.pull_request.head.sha})
            
            ---
            *This preview will be automatically updated when you push new commits to this branch.*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # Run Lighthouse on preview
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: |
          npm run lighthouse:ci -- --url="https://finance-forecast-git-${GITHUB_HEAD_REF//\//-}-${GITHUB_REPOSITORY_OWNER}.vercel.app"
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

  # Accessibility testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npm run test:setup

      - name: Run accessibility tests
        working-directory: ./frontend
        run: npm run test:a11y
        env:
          PREVIEW_URL: "https://finance-forecast-git-${GITHUB_HEAD_REF//\//-}-${GITHUB_REPOSITORY_OWNER}.vercel.app"
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

  # Visual regression testing
  visual:
    name: Visual Regression Testing
    runs-on: ubuntu-latest
    needs: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npm run test:setup

      - name: Run visual regression tests
        working-directory: ./frontend
        run: npm run test:visual
        env:
          PREVIEW_URL: "https://finance-forecast-git-${GITHUB_HEAD_REF//\//-}-${GITHUB_REPOSITORY_OWNER}.vercel.app"
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Upload visual test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: visual-test-results
          path: frontend/test-results/visual/

  # Security scan on preview
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

      - name: Scan preview URL
        run: |
          curl -s "https://finance-forecast-git-${GITHUB_HEAD_REF//\//-}-${GITHUB_REPOSITORY_OWNER}.vercel.app" | \
          grep -E "(script|link|img)" | \
          head -20
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

  # Performance monitoring
  performance:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run performance tests
        working-directory: ./frontend
        run: npm run test:performance
        env:
          PREVIEW_URL: "https://finance-forecast-git-${GITHUB_HEAD_REF//\//-}-${GITHUB_REPOSITORY_OWNER}.vercel.app"
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-results
          path: frontend/test-results/performance/
