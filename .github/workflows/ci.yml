name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: write
  packages: write
  id-token: write
  actions: read
  security-events: write

env:
  NODE_VERSION: '18.20.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Diagnostic: Node & environment
        run: |
          echo "Node version:" && node --version || true
          echo "NPM version:" && npm --version || true
          echo "Workspace listing:" && ls -la || true

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Upload npm debug logs (if npm ci fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-lint
          path: /home/runner/.npm/_logs/**/*.log

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Run TypeScript check
        working-directory: ./frontend
        run: npm run type-check

      - name: Check formatting
        working-directory: ./frontend
        run: npm run format:check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Diagnostic: Check Codecov token
        run: |
          if [ -z "${{ secrets.CODECOV_TOKEN }}" ]; then
            echo "WARNING: CODECOV_TOKEN is not set — codecov upload may fail (public repos may not require token)."
          else
            echo "CODECOV_TOKEN appears set (will not print value)."
          fi

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Upload npm debug logs (if npm ci fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-test
          path: /home/runner/.npm/_logs/**/*.log

      - name: Run unit tests
        working-directory: ./frontend
        run: npm run test:ci

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Upload npm debug logs (if npm ci fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-e2e
          path: /home/runner/.npm/_logs/**/*.log

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npm run test:setup

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Run E2E tests
        working-directory: ./frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: frontend/test-results/

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Upload npm debug logs (if npm ci fails)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: npm-debug-logs-performance
          path: /home/runner/.npm/_logs/**/*.log

      - name: Build application
        working-directory: ./frontend
        run: npm run build

      - name: Run Lighthouse CI
        working-directory: ./frontend
        run: npm run lighthouse:ci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Run bundle analysis
        working-directory: ./frontend
        run: npm run analyze

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@v0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        working-directory: ./frontend
        run: npm audit --audit-level=moderate

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image (Backend)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint, test, e2e, performance, security, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostic: Check Render and Vercel secrets
        run: |
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then echo "ERROR: RENDER_API_KEY not set"; exit 1; fi
          if [ -z "${{ secrets.RENDER_BACKEND_SERVICE_ID_STAGING }}" ]; then echo "ERROR: RENDER_BACKEND_SERVICE_ID_STAGING not set"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "WARNING: VERCEL_TOKEN not set — Vercel deploy may fail"; fi

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: ''

      - name: Trigger Render Deploy (Backend - Staging)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_BACKEND_SERVICE_ID_STAGING }}
        run: |
          curl -fsS -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${SERVICE_ID}/deploys \
            -d '{"clearCache": true}'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, e2e, performance, security, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Diagnostic: Check production secrets
        run: |
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then echo "ERROR: RENDER_API_KEY not set"; exit 1; fi
          if [ -z "${{ secrets.RENDER_BACKEND_SERVICE_ID_PRODUCTION }}" ]; then echo "ERROR: RENDER_BACKEND_SERVICE_ID_PRODUCTION not set"; exit 1; fi
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then echo "WARNING: VERCEL_TOKEN not set — Vercel deploy may fail"; fi

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

      - name: Trigger Render Deploy (Backend - Production)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.RENDER_BACKEND_SERVICE_ID_PRODUCTION }}
        run: |
          curl -fsS -X POST \
            -H "Accept: application/json" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            https://api.render.com/v1/services/${SERVICE_ID}/deploys \
            -d '{"clearCache": true}'

      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
